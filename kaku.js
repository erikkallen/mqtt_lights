// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Kaku;

  Kaku = (function() {
    function Kaku(address, pin, periodusec, repeats) {
      this.address = address;
      this.pin = pin;
      this.periodusec = periodusec;
      this.repeats = (1 << repeats) - 1;
      this.wpi = require('wiring-pi');
      this.wpi.wiringPiSetup();
      this.wpi.pinMode(this.pin, OUTPUT);
    }

    Kaku.prototype.sendGroup = function(switchOn) {
      var i, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.repeats; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        this.sendStartPulse();
        this.sendAddress();
        this.sendBit(true);
        this.sendBit(switchOn);
        this.sendUnit(0);
        results.push(this.sendStopPulse());
      }
      return results;
    };

    Kaku.prototype.sendUnit = function(unit, switchOn) {
      var i, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.repeats; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        this.sendStartPulse();
        this.sendAddress();
        this.sendBit(false);
        this.sendBit(switchOn);
        this.sendUnit(unit);
        results.push(this.sendStopPulse());
      }
      return results;
    };

    Kaku.prototype.sendDim = function(unit, dimLevel) {
      var i, j, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.repeats; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        this.sendStartPulse();
        this.sendAddress();
        this.sendBit(false);
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        this.wpi.delayMicroseconds(this.periodusec);
        this.sendUnit(unit);
        j = 3;
        while (j >= 0) {
          this.sendBit(dimLevel & 1 << j);
          j--;
        }
        results.push(this.sendStopPulse());
      }
      return results;
    };

    Kaku.prototype._sendStartPulse = function() {
      this.wpi.digitalWrite(this.pin, HIGH);
      this.wpi.delayMicroseconds(this.periodusec);
      this.wpi.digitalWrite(this.pin, LOW);
      return this.wpi.delayMicroseconds(this.periodusec * 10 + (this.periodusec >> 1));
    };

    Kaku.prototype._sendAddress = function() {
      var i, results;
      i = 25;
      results = [];
      while (i >= 0) {
        this.sendBit((this.address >> i) & 1);
        results.push(i--);
      }
      return results;
    };

    Kaku.prototype._sendUnit = function(unit) {
      var i, results;
      i = 3;
      results = [];
      while (i >= 0) {
        this.sendBit(unit & 1 << i);
        results.push(i--);
      }
      return results;
    };

    Kaku.prototype._sendStopPulse = function() {
      this.wpi.digitalWrite(this.pin, HIGH);
      this.wpi.delayMicroseconds(this.periodusec);
      this.wpi.digitalWrite(this.pin, LOW);
      return this.wpi.delayMicroseconds(this.periodusec * 40);
    };

    Kaku.prototype._sendBit = function(isBitOne) {
      if (isBitOne) {
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        this.wpi.delayMicroseconds(this.periodusec * 5);
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        return this.wpi.delayMicroseconds(this.periodusec);
      } else {
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, HIGH);
        this.wpi.delayMicroseconds(this.periodusec);
        this.wpi.digitalWrite(this.pin, LOW);
        return this.wpi.delayMicroseconds(this.periodusec * 5);
      }
    };

    return Kaku;

  })();

  module.exports = Kaku;

}).call(this);
